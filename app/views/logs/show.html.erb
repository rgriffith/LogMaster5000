<h2>Parsed File</h2>

<dl class="dl-horizontal">
	<dt>File</dt>
	<dd><%= @log.logfile %></dd>
	<dt>Size</dt>
	<dd><%= number_to_human_size(File.size(@log.logfile.current_path)) %></dd>
	<dt>Lines</dt>
	<dd><%= number_with_delimiter(@line_total) %></dd>
	<dt>Entries Found</dt>
	<dd><%= number_with_delimiter(@entry_count) %></dt>
</dl>

<div id="output">
	<div class="control-group">
    	<div class="controls">
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" checked="checked" name="level[]" id="level1" value="ERROR"> ERROR
			</label>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" name="level[]" id="level2" value="WARN"> WARN
			</label>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" name="level[]" id="level3" value="DEBUG"> DEBUG
			</label>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" name="level[]" id="level3" value="INFO"> INFO
			</label>
		</div>
	</div>
	<table id="entries" class="table table-striped table-bordered table-condensed">
		<thead>
			<tr>
				<th style="width:10%">Level</th>
				<th style="width:25%">Class</th>
				<th>Message</th>
				<th style="width:5%">Hits</th>
			</tr>
		</thead>
		<tbody>
		</tbody>
	</table>
</div>

<div class="modal hide" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
		<h3 id="myModalLabel">Stack Trace</h3>
	</div>
	<div class="modal-body"></div>
	<div class="modal-footer">
		<button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
	</div>
</div>

<script>

jQuery.ajaxSetup({ 
  'beforeSend': function(xhr) {
  	xhr.setRequestHeader("Accept", "text/javascript");
  }
})

var LogMaster = {
	self: this,
	log: {},
	entriesTable: null,
	populateDataTable: function(data) {
		var self = this;

		// Redraw the DataTable with the entry data.
		self.entriesTable.dataTable({
			bDestroy: true,
			bAutoWidth: false,
			aaData: data.aaData,
			aaSorting: [],
			aoColumns: [
		        { mData: "level" },
		        { mData: "class" },
		        { 
		        	mData: "shortmessage",
		        	sClass: "trace-toggle" ,
		        	sType: "html",
		        	fnRender: function ( o, val ) {
		        		if (o.aData.trace !== "") {
        					return '<a href="#" title="View Stack Trace" data-rel="' + o.aData.checksum + '"><i class="icon-tasks"></i></a> <span class="entry-message">' + val + '</span><div style="display:none"><pre>' + o.aData.message + "\r\r" + o.aData.trace + '</pre></div>'; 
        				} else {
        					return '<span class="entry-message">' + val + '</span>';
        				}        				
        			}
        		},
		        { 
		        	mData: "hits",
		        	sClass: "popover-toggle" ,
		        	sSortDataType: "hit-count",
		        	sType: "numeric",
		        	fnRender: function ( o, val ) {
		        		if (o.aData.timestamp.length > 0) {
		        			var popoverContent = "",
		        				limit = o.aData.timestamp.length < 10 ? o.aData.timestamp.length : 10;
		        			for (var i = 0; i < limit; i++) {
		        				popoverContent += (o.aData.timestamp[i] + "<br />");
		        			}

		        			if (o.aData.timestamp.length > limit) {
		        				popoverContent += "...";	
		        			}

        					return '<a href="#" class="badge badge-info timestamp-badge" title="Timestamps" rel="popover" data-content="'+popoverContent+'"><i class="icon-white icon-time"></i> ' + val + '</a>'; 
        				} else {
        					return '<span class="badge">' + val + '</span>';
        				}        				
        			}
		        }
		    ],
		    fnDrawCallback: function(o) {
		    	// Add the popovers.
				$("a[rel=popover]").popover({placement: "left"});
		    }
		}).fnFilter("ERROR", 0);
	},
	filterDataTable: function() {
		var self = this,
			regex = '',
			filters = $('.level-filter:checked');

		filters.each(function(i){
			regex += $(this).val() + '|';
		});

		regex = regex.substr(0, regex.length-1)

		// Redraw the DataTable with the filter.
		self.entriesTable.dataTable().fnFilter(regex,0,true);
	}
};

$(document).ready(function(){
	/* Create an array with the values of all the badge values in the hits column */
	$.fn.dataTableExt.afnSortData['hit-count'] = function  ( oSettings, iColumn )
	{
		var aData = [];
		$( 'td:eq('+iColumn+') .badge', oSettings.oApi._fnGetTrNodes(oSettings) ).each( function () {
			aData.push( this.text );
		} );
		return aData;
	}

	var messageModal = $("#messageModal").modal({show:false}),
		activeLog = null;

	LogMaster.entriesTable = $('#entries');
	LogMaster.entriesTable.dataTable({
		bSort: false
	});

	LogMaster.log = {
		entries: <%= @output.html_safe %>
	};

	LogMaster.populateDataTable(LogMaster.log.entries);

	$('.level-filter').change(function(){
		LogMaster.filterDataTable();
	});

	$('td.trace-toggle:has(a)', $('#entries')).live('click', function () {
    	$('.modal-body', messageModal).html($('div', $(this)).html());
		messageModal.modal('show');
		return false;   
    });

	// Remove clicking from the popovers
	$("a[rel=popover]").live("click", function(e) {
		e.preventDefault()
	});
});

</script>