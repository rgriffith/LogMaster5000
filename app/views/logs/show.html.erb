<div class="page-header">	
  	<div class="btn-group pull-right span3">
  		<a href="#" id="log-popover-toggler" class="btn btn-small" title="Log Information"><i class="icon-info-sign"></i> log info</a>
  		<a href="#" id="cache-popover-toggler" class="btn btn-small" title="Cache Information"><i class="icon-hdd"></i> cache info</a>
  		<%= link_to raw('<i class="icon-pencil"></i> edit log'), edit_log_path(@log), :remote => true, :title => 'Edit log', :class => "modal-toggler btn btn-small" %>
  	</div>
  	<h1>Log Details <small><%= @log.logfile.file.filename %></small></h1> 	
  	<%= render :partial => 'logs/loglabels', :locals => { :labels => @log.labels } %>
</div>

<div id="output">
	<div class="control-group">
    	<div class="controls">			
		<% if @entries[:json_hash]['type'].match(/catalina/i) %>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" checked="checked" name="level[]" id="level1" value="SEVERE"> SEVERE
			</label>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" name="level[]" id="level3" value="INFO"> INFO
			</label>
		<% else %>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" checked="checked" name="level[]" id="level1" value="ERROR"> ERROR
			</label>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" name="level[]" id="level2" value="WARN"> WARN
			</label>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" name="level[]" id="level3" value="DEBUG"> DEBUG
			</label>
			<label class="checkbox inline">
				<input class="level-filter" type="checkbox" name="level[]" id="level3" value="INFO"> INFO
			</label>
		<% end %>
		</div>
	</div>
	<table id="entries" class="table table-striped table-bordered table-condensed">
		<thead>
			<tr>
				<th style="width:10%">Level</th>
				<th style="width:25%">Class</th>
				<th>Message</th>
				<th style="width:5%">Hits</th>
			</tr>
		</thead>
		<tbody>
		</tbody>
	</table>
</div>

<div class="modal hide" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
		<h3 id="myModalLabel">Stack Trace</h3>
	</div>
	<div class="modal-body"></div>
	<div class="modal-footer">
		<button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
	</div>
</div>
<div id="log-popover-content" class="hide">
	<dl class="dl-horizontal left-align">
		<dt>Type</dt>
		<dd><%= @entries[:json_hash]["type"] %></dd>
		<dt>Size</dt>
		<dd><%= number_to_human_size(@log.logfile.size) %></dd>
		<dt>Lines</dt>
		<dd><%= number_with_delimiter(@entries[:json_hash]["line_total"]) %></dd>
		<dt>Entries Found</dt>
		<dd><%= number_with_delimiter(@entries[:json_hash]["entries"].size) %></dt>
		<dt>Last Updated</dt>
		<dd><%=distance_of_time_in_words(Time.at(@log.updated_at), Time.now)%> ago</dd>
	</dl>
	<%= link_to raw('<i class="icon-white icon-download"></i> Download Log'), download_log_path(@log), :title => 'download log', :class => "btn btn-block btn-primary" %>
</div>
<div id="cache-popover-content" class="hide">
	<dl class="dl-horizontal left-align">
		<dt>Cache File Size</dt>
		<dd><%= number_to_human_size(@log.entriesjson.size) %></dd>
	</dl>
	<%= link_to raw('<i class="icon-white icon-eye-open"></i> View Cache'), log_path(@log, :format => "json"), :class => "btn btn-block btn-primary" %>
</div>

<script>

jQuery.ajaxSetup({ 
  'beforeSend': function(xhr) {
  	xhr.setRequestHeader("Accept", "text/javascript");
  }
})

var LogMaster = {
	self: this,
	log: {},
	entriesTable: null,
	levelMapping: {
		debug: "default",
		info: "info",
		warn: "warning",
		error: "important",
		severe: "important"
	},
	populateDataTable: function(data) {
		var self = this;

		// Redraw the DataTable with the entry data.
		self.entriesTable.dataTable({
			bDestroy: true,
			bAutoWidth: false,
			aaData: data,
			aaSorting: [],
			aoColumns: [
		        { 
		        	mData: "level",
		        	fnRender: function ( o, val ) {		        		
		        		return '<span class="badge badge-'+self.levelMapping[val.toLowerCase()]+' level-badge">' + val + '</span>';        				
        			}
		    	},
		        { mData: "class" },
		        { 
		        	mData: "shortmessage",
		        	sClass: "trace-toggle" ,
		        	sType: "html",
		        	fnRender: function ( o, val ) {
		        		if (o.aData.trace !== "") {
        					return '<a href="#" title="View Stack Trace" data-rel="' + o.aData.checksum + '"><i class="icon-tasks"></i></a> <span class="entry-message">' + val + '</span><div style="display:none"><pre>' + o.aData.trace + '</pre></div>'; 
        				} else {
        					return '<span class="entry-message">' + val + '</span>';
        				}        				
        			}
        		},
		        { 
		        	mData: "hits",
		        	sClass: "popover-toggle" ,
		        	sSortDataType: "hit-count",
		        	sType: "numeric",
		        	fnRender: function ( o, val ) {
		        		if (o.aData.timestamp.length > 0) {
		        			var popoverContent = "",
		        				limit = o.aData.timestamp.length < 10 ? o.aData.timestamp.length : 10;
		        			for (var i = 0; i < limit; i++) {
		        				popoverContent += (o.aData.timestamp[i] + "<br />");
		        			}

		        			if (o.aData.timestamp.length > limit) {
		        				popoverContent += "...";	
		        			}

        					return '<a href="#" class="badge badge-info timestamp-badge" title="Timestamps" rel="popover" data-content="'+popoverContent+'"><i class="icon-white icon-time"></i> ' + val + '</a>'; 
        				} else {
        					return '<span class="badge badge-info timestamp-badge">' + val + '</span>';
        				}        				
        			}
		        }
		    ],
		    fnDrawCallback: function(o) {
		    	// Add the popovers.
				$("a[rel=popover]").popover({placement: "left"});
		    }
		}).fnFilter("<%= @entries[:json_hash]['type'].match(/catalina/i) ? 'SEVERE' : 'ERROR'%>", 0);
	},
	filterDataTable: function() {
		var self = this,
			regex = '',
			filters = $('.level-filter:checked');

		filters.each(function(i){
			regex += $(this).val() + '|';
		});

		regex = regex.substr(0, regex.length-1)

		// Redraw the DataTable with the filter.
		self.entriesTable.dataTable().fnFilter(regex,0,true);
	}
};

$(document).ready(function(){
	/* Create an array with the values of all the badge values in the hits column */
	$.fn.dataTableExt.afnSortData['hit-count'] = function  ( oSettings, iColumn )
	{
		var aData = [];
		$( 'td:eq('+iColumn+') .badge', oSettings.oApi._fnGetTrNodes(oSettings) ).each( function () {
			aData.push( this.text );
		} );
		return aData;
	}

	var messageModal = $("#messageModal").modal({show:false}),
		activeLog = null,
		activePopover = null;

	LogMaster.entriesTable = $('#entries');
	LogMaster.entriesTable.dataTable({
		bSort: false
	});

	LogMaster.log = <%= @entries[:data].force_encoding("UTF-8").html_safe %>;

	LogMaster.populateDataTable(LogMaster.log.entries);

	$('.level-filter').change(function(){
		LogMaster.filterDataTable();
	});

	$('td.trace-toggle:has(a)', $('#entries')).live('click', function () {
    	$('.modal-body', messageModal).html($('div', $(this)).html());

    	// Hide any active popovers.
    	if (activePopover !== null) {
			activePopover.popover('hide');
		}

		messageModal.modal('show');
		return false;   
    });

	// Remove clicking from the popovers
	$("a[rel=popover]").live("click", function(e) {
		e.preventDefault()
	});

	// Create popovers on the fly and toggle them.
	$('a[id$="popover-toggler"]').click(function(e){	
		e.preventDefault();

		var element = $(this),
			elementId = element.attr('id'),
			popoverTitle = element.attr('title'),
			popoverContent = $('#' + elementId.replace('toggler', 'content')).html();

		// Toggle selected popover.	
		element.popover({
			title: popoverTitle,
			content: popoverContent,
			placement: 'bottom',
			trigger: 'manual'
		}).popover('toggle');

		// Clear open popover.
		// Only necessary if the current differs from active.
		if (activePopover !== null && elementId !== activePopover.attr('id')) {
			activePopover.popover('hide');
		}
		
		// Update the active popover.
		activePopover = element;
	});
});

</script>